// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF9e4e295DecodeGithubComStorage(in *jlexer.Lexer, out *Relations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "R2I":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.R2I = make(map[string]uint64)
				} else {
					out.R2I = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 uint64
					v1 = uint64(in.Uint64())
					(out.R2I)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "I2R":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.I2R = make(map[uint64]*Relation)
				} else {
					out.I2R = nil
				}
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v2 *Relation
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Relation)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					(out.I2R)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Index":
			out.Index = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF9e4e295EncodeGithubComStorage(out *jwriter.Writer, in Relations) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"R2I\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.R2I == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.R2I {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.Uint64(uint64(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"I2R\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.I2R == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.I2R {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v4Name))
				out.RawByte(':')
				if v4Value == nil {
					out.RawString("null")
				} else {
					(*v4Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Index))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Relations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF9e4e295EncodeGithubComStorage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Relations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF9e4e295EncodeGithubComStorage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Relations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF9e4e295DecodeGithubComStorage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Relations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF9e4e295DecodeGithubComStorage(l, v)
}
func easyjsonF9e4e295DecodeGithubComStorage1(in *jlexer.Lexer, out *Relation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "N":
			out.N = uint64(in.Uint64())
		case "V":
			out.V = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF9e4e295EncodeGithubComStorage1(out *jwriter.Writer, in Relation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"N\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.N))
	}
	{
		const prefix string = ",\"V\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.V))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Relation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF9e4e295EncodeGithubComStorage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Relation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF9e4e295EncodeGithubComStorage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Relation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF9e4e295DecodeGithubComStorage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Relation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF9e4e295DecodeGithubComStorage1(l, v)
}
func easyjsonF9e4e295DecodeGithubComStorage2(in *jlexer.Lexer, out *LabelValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "T2I":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.T2I = make(map[string]uint64)
				} else {
					out.T2I = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 uint64
					v5 = uint64(in.Uint64())
					(out.T2I)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "I2T":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.I2T = make(map[uint64]string)
				} else {
					out.I2T = nil
				}
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.I2T)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Index":
			out.Index = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF9e4e295EncodeGithubComStorage2(out *jwriter.Writer, in LabelValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"T2I\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.T2I == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.T2I {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.Uint64(uint64(v7Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"I2T\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.I2T == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.I2T {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Index))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LabelValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF9e4e295EncodeGithubComStorage2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LabelValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF9e4e295EncodeGithubComStorage2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LabelValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF9e4e295DecodeGithubComStorage2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LabelValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF9e4e295DecodeGithubComStorage2(l, v)
}
func easyjsonF9e4e295DecodeGithubComStorage3(in *jlexer.Lexer, out *LabelTable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LabelValue":
			if in.IsNull() {
				in.Skip()
				out.LabelValue = nil
			} else {
				if out.LabelValue == nil {
					out.LabelValue = new(LabelValue)
				}
				(*out.LabelValue).UnmarshalEasyJSON(in)
			}
		case "Relations":
			if in.IsNull() {
				in.Skip()
				out.Relations = nil
			} else {
				if out.Relations == nil {
					out.Relations = new(Relations)
				}
				(*out.Relations).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF9e4e295EncodeGithubComStorage3(out *jwriter.Writer, in LabelTable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LabelValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.LabelValue == nil {
			out.RawString("null")
		} else {
			(*in.LabelValue).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Relations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Relations == nil {
			out.RawString("null")
		} else {
			(*in.Relations).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LabelTable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF9e4e295EncodeGithubComStorage3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LabelTable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF9e4e295EncodeGithubComStorage3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LabelTable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF9e4e295DecodeGithubComStorage3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LabelTable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF9e4e295DecodeGithubComStorage3(l, v)
}
